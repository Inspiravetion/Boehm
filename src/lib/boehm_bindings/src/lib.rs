#![feature(globs)]
extern crate libc;

// use libc;
use libc::*;

/* automatically generated by rust-bindgen */

pub type GC_PTR = *mut ::libc::c_void;
pub type GC_word = ::libc::c_ulong;
pub type GC_signed_word = ::libc::c_long;
pub type GC_oom_func =
    ::std::option::Option<extern "C" fn(arg1: size_t) -> *mut ::libc::c_void>;
pub type GC_finalizer_notifier_proc = ::std::option::Option<extern "C" fn()>;
pub type GC_stop_func =
    ::std::option::Option<extern "C" fn() -> ::libc::c_int>;
pub type GC_finalization_proc =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut ::libc::c_void,
                               arg2: *mut ::libc::c_void)>;
pub type GC_warn_proc =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut ::libc::c_char, arg2: GC_word)>;
pub type GC_hidden_pointer = GC_word;
pub type GC_fn_type =
    ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
#[repr(C)]
pub struct Struct_GC_stack_base {
    pub mem_base: *mut ::libc::c_void,
}
pub type GC_stack_base_func =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Struct_GC_stack_base,
                               arg2: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
pub type GC_has_static_roots_func =
    ::std::option::Option<extern "C" fn
                              (arg1: *const ::libc::c_char,
                               arg2: *mut ::libc::c_void, arg3: size_t)
                              -> ::libc::c_int>;
#[link(name = "gc")]
extern "C" {
    pub static mut GC_gc_no: GC_word;
    pub static mut GC_oom_fn: GC_oom_func;
    pub static mut GC_find_leak: ::libc::c_int;
    pub static mut GC_all_interior_pointers: ::libc::c_int;
    pub static mut GC_finalize_on_demand: ::libc::c_int;
    pub static mut GC_java_finalization: ::libc::c_int;
    pub static mut GC_finalizer_notifier: GC_finalizer_notifier_proc;
    pub static mut GC_dont_gc: ::libc::c_int;
    pub static mut GC_dont_expand: ::libc::c_int;
    pub static mut GC_use_entire_heap: ::libc::c_int;
    pub static mut GC_full_freq: ::libc::c_int;
    pub static mut GC_non_gc_bytes: GC_word;
    pub static mut GC_no_dls: ::libc::c_int;
    pub static mut GC_free_space_divisor: GC_word;
    pub static mut GC_max_retries: GC_word;
    pub static mut GC_stackbottom: *mut ::libc::c_char;
    pub static mut GC_dont_precollect: ::libc::c_int;
    pub static mut GC_time_limit: ::libc::c_ulong;
    pub static mut GC_same_obj_print_proc:
               ::std::option::Option<extern "C" fn
                                         (arg1: *mut ::libc::c_void,
                                          arg2: *mut ::libc::c_void)>;
    pub static mut GC_is_valid_displacement_print_proc:
               ::std::option::Option<extern "C" fn
                                         (arg1: *mut ::libc::c_void)>;
    pub static mut GC_is_visible_print_proc:
               ::std::option::Option<extern "C" fn
                                         (arg1: *mut ::libc::c_void)>;
    pub fn GC_get_version() -> ::libc::c_uint;
    pub fn GC_get_gc_no() -> GC_word;
    pub fn GC_set_oom_fn(arg1: GC_oom_func);
    pub fn GC_get_oom_fn() -> GC_oom_func;
    pub fn GC_set_find_leak(arg1: ::libc::c_int);
    pub fn GC_get_find_leak() -> ::libc::c_int;
    pub fn GC_set_all_interior_pointers(arg1: ::libc::c_int);
    pub fn GC_get_all_interior_pointers() -> ::libc::c_int;
    pub fn GC_set_finalize_on_demand(arg1: ::libc::c_int);
    pub fn GC_get_finalize_on_demand() -> ::libc::c_int;
    pub fn GC_set_java_finalization(arg1: ::libc::c_int);
    pub fn GC_get_java_finalization() -> ::libc::c_int;
    pub fn GC_set_finalizer_notifier(arg1: GC_finalizer_notifier_proc);
    pub fn GC_get_finalizer_notifier() -> GC_finalizer_notifier_proc;
    pub fn GC_set_dont_expand(arg1: ::libc::c_int);
    pub fn GC_get_dont_expand() -> ::libc::c_int;
    pub fn GC_set_full_freq(arg1: ::libc::c_int);
    pub fn GC_get_full_freq() -> ::libc::c_int;
    pub fn GC_set_non_gc_bytes(arg1: GC_word);
    pub fn GC_get_non_gc_bytes() -> GC_word;
    pub fn GC_set_no_dls(arg1: ::libc::c_int);
    pub fn GC_get_no_dls() -> ::libc::c_int;
    pub fn GC_set_free_space_divisor(arg1: GC_word);
    pub fn GC_get_free_space_divisor() -> GC_word;
    pub fn GC_set_max_retries(arg1: GC_word);
    pub fn GC_get_max_retries() -> GC_word;
    pub fn GC_set_dont_precollect(arg1: ::libc::c_int);
    pub fn GC_get_dont_precollect() -> ::libc::c_int;
    pub fn GC_set_time_limit(arg1: ::libc::c_ulong);
    pub fn GC_get_time_limit() -> ::libc::c_ulong;
    pub fn GC_set_pages_executable(arg1: ::libc::c_int);
    pub fn GC_get_pages_executable() -> ::libc::c_int;
    pub fn GC_set_handle_fork(arg1: ::libc::c_int);
    pub fn GC_init();
    pub fn GC_malloc(arg1: size_t) -> *mut ::libc::c_void;
    pub fn GC_malloc_atomic(arg1: size_t) -> *mut ::libc::c_void;
    pub fn GC_strdup(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn GC_strndup(arg1: *const ::libc::c_char, arg2: size_t) ->
     *mut ::libc::c_char;
    pub fn GC_malloc_uncollectable(arg1: size_t) -> *mut ::libc::c_void;
    pub fn GC_malloc_stubborn(arg1: size_t) -> *mut ::libc::c_void;
    pub fn GC_memalign(arg1: size_t, arg2: size_t) -> *mut ::libc::c_void;
    pub fn GC_posix_memalign(arg1: *mut *mut ::libc::c_void, arg2: size_t,
                             arg3: size_t) -> ::libc::c_int;
    pub fn GC_free(arg1: *mut ::libc::c_void);
    pub fn GC_change_stubborn(arg1: *mut ::libc::c_void);
    pub fn GC_end_stubborn_change(arg1: *mut ::libc::c_void);
    pub fn GC_base(arg1: *mut ::libc::c_void) -> *mut ::libc::c_void;
    pub fn GC_size(arg1: *const ::libc::c_void) -> size_t;
    pub fn GC_realloc(arg1: *mut ::libc::c_void, arg2: size_t) ->
     *mut ::libc::c_void;
    pub fn GC_expand_hp(arg1: size_t) -> ::libc::c_int;
    pub fn GC_set_max_heap_size(arg1: GC_word);
    pub fn GC_exclude_static_roots(arg1: *mut ::libc::c_void,
                                   arg2: *mut ::libc::c_void);
    pub fn GC_clear_roots();
    pub fn GC_add_roots(arg1: *mut ::libc::c_void, arg2: *mut ::libc::c_void);
    pub fn GC_remove_roots(arg1: *mut ::libc::c_void,
                           arg2: *mut ::libc::c_void);
    pub fn GC_register_displacement(arg1: size_t);
    pub fn GC_debug_register_displacement(arg1: size_t);
    pub fn GC_gcollect();
    pub fn GC_gcollect_and_unmap();
    pub fn GC_try_to_collect(arg1: GC_stop_func) -> ::libc::c_int;
    pub fn GC_set_stop_func(arg1: GC_stop_func);
    pub fn GC_get_stop_func() -> GC_stop_func;
    pub fn GC_get_heap_size() -> size_t;
    pub fn GC_get_free_bytes() -> size_t;
    pub fn GC_get_unmapped_bytes() -> size_t;
    pub fn GC_get_bytes_since_gc() -> size_t;
    pub fn GC_get_total_bytes() -> size_t;
    pub fn GC_get_heap_usage_safe(arg1: *mut GC_word, arg2: *mut GC_word,
                                  arg3: *mut GC_word, arg4: *mut GC_word,
                                  arg5: *mut GC_word);
    pub fn GC_disable();
    pub fn GC_is_disabled() -> ::libc::c_int;
    pub fn GC_enable();
    pub fn GC_enable_incremental();
    pub fn GC_incremental_protection_needs() -> ::libc::c_int;
    pub fn GC_collect_a_little() -> ::libc::c_int;
    pub fn GC_malloc_ignore_off_page(arg1: size_t) -> *mut ::libc::c_void;
    pub fn GC_malloc_atomic_ignore_off_page(arg1: size_t) ->
     *mut ::libc::c_void;
    pub fn GC_malloc_atomic_uncollectable(arg1: size_t) ->
     *mut ::libc::c_void;
    pub fn GC_debug_malloc_atomic_uncollectable(arg1: size_t,
                                                s: *const ::libc::c_char,
                                                i: ::libc::c_int) ->
     *mut ::libc::c_void;
    pub fn GC_debug_malloc(arg1: size_t, s: *const ::libc::c_char,
                           i: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn GC_debug_malloc_atomic(arg1: size_t, s: *const ::libc::c_char,
                                  i: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn GC_debug_strdup(arg1: *const ::libc::c_char,
                           s: *const ::libc::c_char, i: ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn GC_debug_strndup(arg1: *const ::libc::c_char, arg2: size_t,
                            s: *const ::libc::c_char, i: ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn GC_debug_malloc_uncollectable(arg1: size_t,
                                         s: *const ::libc::c_char,
                                         i: ::libc::c_int) ->
     *mut ::libc::c_void;
    pub fn GC_debug_malloc_stubborn(arg1: size_t, s: *const ::libc::c_char,
                                    i: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn GC_debug_malloc_ignore_off_page(arg1: size_t,
                                           s: *const ::libc::c_char,
                                           i: ::libc::c_int) ->
     *mut ::libc::c_void;
    pub fn GC_debug_malloc_atomic_ignore_off_page(arg1: size_t,
                                                  s: *const ::libc::c_char,
                                                  i: ::libc::c_int) ->
     *mut ::libc::c_void;
    pub fn GC_debug_free(arg1: *mut ::libc::c_void);
    pub fn GC_debug_realloc(arg1: *mut ::libc::c_void, arg2: size_t,
                            s: *const ::libc::c_char, i: ::libc::c_int) ->
     *mut ::libc::c_void;
    pub fn GC_debug_change_stubborn(arg1: *mut ::libc::c_void);
    pub fn GC_debug_end_stubborn_change(arg1: *mut ::libc::c_void);
    pub fn GC_debug_malloc_replacement(arg1: size_t) -> *mut ::libc::c_void;
    pub fn GC_debug_realloc_replacement(arg1: *mut ::libc::c_void,
                                        arg2: size_t) -> *mut ::libc::c_void;
    pub fn GC_register_finalizer(arg1: *mut ::libc::c_void,
                                 arg2: GC_finalization_proc,
                                 arg3: *mut ::libc::c_void,
                                 arg4: *mut GC_finalization_proc,
                                 arg5: *mut *mut ::libc::c_void);
    pub fn GC_debug_register_finalizer(arg1: *mut ::libc::c_void,
                                       arg2: GC_finalization_proc,
                                       arg3: *mut ::libc::c_void,
                                       arg4: *mut GC_finalization_proc,
                                       arg5: *mut *mut ::libc::c_void);
    pub fn GC_register_finalizer_ignore_self(arg1: *mut ::libc::c_void,
                                             arg2: GC_finalization_proc,
                                             arg3: *mut ::libc::c_void,
                                             arg4: *mut GC_finalization_proc,
                                             arg5: *mut *mut ::libc::c_void);
    pub fn GC_debug_register_finalizer_ignore_self(arg1: *mut ::libc::c_void,
                                                   arg2: GC_finalization_proc,
                                                   arg3: *mut ::libc::c_void,
                                                   arg4:
                                                       *mut GC_finalization_proc,
                                                   arg5:
                                                       *mut *mut ::libc::c_void);
    pub fn GC_register_finalizer_no_order(arg1: *mut ::libc::c_void,
                                          arg2: GC_finalization_proc,
                                          arg3: *mut ::libc::c_void,
                                          arg4: *mut GC_finalization_proc,
                                          arg5: *mut *mut ::libc::c_void);
    pub fn GC_debug_register_finalizer_no_order(arg1: *mut ::libc::c_void,
                                                arg2: GC_finalization_proc,
                                                arg3: *mut ::libc::c_void,
                                                arg4:
                                                    *mut GC_finalization_proc,
                                                arg5:
                                                    *mut *mut ::libc::c_void);
    pub fn GC_register_finalizer_unreachable(arg1: *mut ::libc::c_void,
                                             arg2: GC_finalization_proc,
                                             arg3: *mut ::libc::c_void,
                                             arg4: *mut GC_finalization_proc,
                                             arg5: *mut *mut ::libc::c_void);
    pub fn GC_debug_register_finalizer_unreachable(arg1: *mut ::libc::c_void,
                                                   arg2: GC_finalization_proc,
                                                   arg3: *mut ::libc::c_void,
                                                   arg4:
                                                       *mut GC_finalization_proc,
                                                   arg5:
                                                       *mut *mut ::libc::c_void);
    pub fn GC_register_disappearing_link(arg1: *mut *mut ::libc::c_void) ->
     ::libc::c_int;
    pub fn GC_general_register_disappearing_link(arg1:
                                                     *mut *mut ::libc::c_void,
                                                 arg2: *mut ::libc::c_void) ->
     ::libc::c_int;
    pub fn GC_unregister_disappearing_link(arg1: *mut *mut ::libc::c_void) ->
     ::libc::c_int;
    pub fn GC_should_invoke_finalizers() -> ::libc::c_int;
    pub fn GC_invoke_finalizers() -> ::libc::c_int;
    pub fn GC_set_warn_proc(arg1: GC_warn_proc);
    pub fn GC_get_warn_proc() -> GC_warn_proc;
    pub fn GC_ignore_warn_proc(arg1: *mut ::libc::c_char, arg2: GC_word);
    pub fn GC_call_with_alloc_lock(arg1: GC_fn_type,
                                   arg2: *mut ::libc::c_void) ->
     *mut ::libc::c_void;
    pub fn GC_call_with_stack_base(arg1: GC_stack_base_func,
                                   arg2: *mut ::libc::c_void) ->
     *mut ::libc::c_void;
    pub fn GC_do_blocking(arg1: GC_fn_type, arg2: *mut ::libc::c_void) ->
     *mut ::libc::c_void;
    pub fn GC_call_with_gc_active(arg1: GC_fn_type, arg2: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn GC_get_stack_base(arg1: *mut Struct_GC_stack_base) ->
     ::libc::c_int;
    pub fn GC_same_obj(arg1: *mut ::libc::c_void, arg2: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn GC_pre_incr(arg1: *mut *mut ::libc::c_void, arg2: ptrdiff_t) ->
     *mut ::libc::c_void;
    pub fn GC_post_incr(arg1: *mut *mut ::libc::c_void, arg2: ptrdiff_t) ->
     *mut ::libc::c_void;
    pub fn GC_is_visible(arg1: *mut ::libc::c_void) -> *mut ::libc::c_void;
    pub fn GC_is_valid_displacement(arg1: *mut ::libc::c_void) ->
     *mut ::libc::c_void;
    pub fn GC_dump();
    pub fn GC_malloc_many(arg1: size_t) -> *mut ::libc::c_void;
    pub fn GC_register_has_static_roots_callback(arg1:
                                                     GC_has_static_roots_func);
    pub fn GC_set_force_unmap_on_gcollect(arg1: ::libc::c_int);
    pub fn GC_get_force_unmap_on_gcollect() -> ::libc::c_int;
    pub fn GC_win32_free_heap();
}
